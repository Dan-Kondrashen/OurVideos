# Generated by Django 4.1.3 on 2022-12-16 21:17

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActorToFilm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ActorRole', models.CharField(max_length=100, verbose_name='Роль актера')),
            ],
        ),
        migrations.CreateModel(
            name='RatingStar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.SmallIntegerField(default=0, verbose_name='Число')),
            ],
            options={
                'verbose_name': 'Звезда рейтинга',
                'verbose_name_plural': 'Звезды рейтинга',
                'ordering': ['-value'],
            },
        ),
        migrations.CreateModel(
            name='VideoActor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ActorFIO', models.CharField(max_length=70, verbose_name='ФИО')),
                ('ActorPhoto', models.CharField(max_length=50, verbose_name='Фото')),
                ('ActorInfo', models.TextField(max_length=600, verbose_name='Информация')),
            ],
        ),
        migrations.CreateModel(
            name='VideoCountrу',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='VideoDirector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DirectFIO', models.CharField(max_length=70, verbose_name='ФИО')),
                ('DirectPhoto', models.CharField(max_length=50, verbose_name='Фото')),
                ('DirectInfo', models.TextField(max_length=600, verbose_name='Информация')),
            ],
        ),
        migrations.CreateModel(
            name='VideoType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('TypeName', models.CharField(max_length=50, verbose_name='Жанр')),
                ('TypeDesc', models.TextField(max_length=600, verbose_name='Описание')),
            ],
        ),
        migrations.CreateModel(
            name='Videos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('VideoName', models.CharField(max_length=100, verbose_name='Название')),
                ('VideoURL', models.CharField(max_length=100, verbose_name='Ссылка')),
                ('VideoDesc', models.TextField(max_length=900, verbose_name='Описание')),
                ('FrontImg', models.CharField(max_length=70, verbose_name='Титульное фото')),
                ('releaseDate', models.DateField()),
                ('VideoClass', models.CharField(max_length=100, verbose_name='Серия')),
                ('Types', models.ManyToManyField(to='mySite.videotype')),
                ('VideoBy', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mySite.videodirector', verbose_name='Режиссер')),
                ('actorsV', models.ManyToManyField(through='mySite.ActorToFilm', to='mySite.videoactor')),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('star', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mySite.ratingstar', verbose_name='Колличество звезд')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mySite.videos', verbose_name='Название фильма')),
            ],
            options={
                'verbose_name': 'Рейтинг',
                'verbose_name_plural': 'Рейтинги',
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=300, verbose_name='Коментарий')),
                ('com_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mySite.videos')),
            ],
            options={
                'ordering': ['com_date'],
            },
        ),
        migrations.AddField(
            model_name='actortofilm',
            name='Actors',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classOfActorFKay', to='mySite.videoactor', verbose_name='ФИО актера'),
        ),
        migrations.AddField(
            model_name='actortofilm',
            name='VideoN',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classOFVideoFKay', to='mySite.videos', verbose_name='Название видео'),
        ),
    ]
